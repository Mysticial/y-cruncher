/* LoadStoreTypes.h
 * 
 *  Author          : Alexander J. Yee
 *  Date Created    : 11/14/2015
 *  Last Modified   : 11/14/2015
 * 
 */

#pragma once
#ifndef ymp_ArchSpecific_LoadStoreTypes_H
#define ymp_ArchSpecific_LoadStoreTypes_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include "PublicLibs/CompilerSettings.h"
namespace ymp{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
enum class LoadType : unsigned char{
    NORMAL          =   0,
    NON_TEMPORAL    =   1,
    LOAD_AND_EVICT  =   2,  //  NT-load + cldemote
//    LOAD_AND_DESTROY,   //  A trim operation. Mark data as no longer needed.
};
enum class StoreType : unsigned char{
    NORMAL          =   0,
    NON_TEMPORAL    =   1,
};
#if 0
enum class LoadPrefetch : unsigned char{
    NONE,
    PREFETCH_NTA,
    PREFETCH_T0,
    PREFETCH_T1,
    PREFETCH_T2,
};
#endif
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
YM_FORCE_INLINE LoadType clip_to_default(LoadType x, LoadType limit){
    return (unsigned char)x <= (unsigned char)limit ? x : LoadType::NORMAL;
}
YM_FORCE_INLINE StoreType clip_to_default(StoreType x, StoreType limit){
    return (unsigned char)x <= (unsigned char)limit ? x : StoreType::NORMAL;
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
#endif
