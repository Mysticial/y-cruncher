/* BufferTooSmallException.cpp
 * 
 *  Author          : Alexander J. Yee
 *  Date Created    : 04/09/2017
 *  Last Modified   : 04/09/2017
 * 
 */

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include "PublicLibs/ConsoleIO/BasicIO.h"
#include "PublicLibs/ConsoleIO/Label.h"
#include "PublicLibs/ExportSafeLibs/Stream.h"
#include "ExceptionSerialization.h"
#include "BufferTooSmallException.h"
#include "BufferTooSmallThrower.h"
namespace ymp{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
YMP_EXCEPTION_DEFINITIONS(BufferTooSmallException)
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
YM_NO_INLINE BufferTooSmallException::BufferTooSmallException(const char* function, siL_t buffer_size, uiL_t required_size)
    : m_function(function)
    , m_buffer_size(buffer_size)
    , m_required_size(required_size)
{}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void BufferTooSmallException::print() const{
    Console::ConsoleLockScope lock;
    Console::println("\n", 'R');
    Console::println_labelc("Exception Encountered", get_typename());
    Console::println();
    Console::println("Buffer is too small:");
    Console::println_labelm         ("    Function: ", m_function);
    Console::println_labelm_commas  ("    Buffer Size: ", m_buffer_size);
    Console::println_labelm_commas  ("    Required Size: ", m_required_size);
    Console::println("\n");
    Console::set_color('w');
}
BufferTooSmallException::BufferTooSmallException(SerializationPassKey key, const char*& stream)
    : Exception(key, stream)
{
    ExceptionTools::parse(stream, m_buffer_size);
    ExceptionTools::parse(stream, m_required_size);
}
void BufferTooSmallException::serialize(std::string& stream) const{
    Exception::serialize(stream);
    ExceptionTools::write(stream, m_buffer_size);
    ExceptionTools::write(stream, m_required_size);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
[[noreturn]] YM_NO_INLINE
void throw_BufferTooSmallException(const char* function, siL_t buffer_size, uiL_t required_size){
#ifdef YMP_BUILD_DEVELOPER
    BufferTooSmallException e(function, buffer_size, required_size);
    e.print();
    throw e;
#else
    throw BufferTooSmallException(function, buffer_size, required_size);
#endif
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
