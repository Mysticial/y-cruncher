/* SystemException.h
 * 
 *  Author          : Alexander J. Yee
 *  Date Created    : 04/10/2017
 *  Last Modified   : 04/10/2017
 * 
 */

#pragma once
#ifndef ymp_Exceptions_SystemException_H
#define ymp_Exceptions_SystemException_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include <string>
#include "PublicLibs/CompilerSettings.h"
#include "Exception.h"
namespace ymp{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
class SystemException : public Exception{
    YMP_EXCEPTION_DECLARATIONS()

public:
    YM_NO_INLINE SystemException(const char* function, const char* message, int code);
    YM_NO_INLINE SystemException(const char* function, std::string message, int code);

    virtual void print() const override;

    const std::string& message() const{
        return m_message;
    }

public:
    //  Serialization
    SystemException(SerializationPassKey key, const char*& stream);
    virtual void serialize(std::string& stream) const override;

protected:
    std::string m_function;
    std::string m_message;
    int m_code;
};
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
#endif
