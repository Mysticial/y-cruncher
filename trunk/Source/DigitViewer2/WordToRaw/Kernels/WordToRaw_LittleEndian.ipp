/* WordToRaw_LittleEndian.ipp
 * 
 *  Author          : Alexander J. Yee
 *  Date Created    : 02/12/2018
 *  Last Modified   : 02/12/2018
 * 
 */

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include "WordToRaw_LittleEndian.h"
namespace DigitViewer2{
namespace WordToRaw{
    using namespace ymp;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
YM_NO_INLINE void word_to_hex(char* raw, const u32_t* T, upL_t words){
    raw += words * 8;
    w32_to_hex_LittleEndian((u32_t*)raw, T, words);
}
YM_NO_INLINE void word_to_dec(char* raw, const u32_t* T, upL_t words){
    raw += words * 9;
    w32_to_dec_LittleEndian(raw, T, words);
}
////////////////////////////////////////////////////////////////////////////////
YM_NO_INLINE void word_to_hex(char* raw, const u64_t* T, upL_t words){
    raw += words * 16;
    w64_to_hex_LittleEndian((u64_t*)raw, T, words);
}
YM_NO_INLINE void word_to_dec(char* raw, const u64_t* T, upL_t words){
    raw += words * 19;
    w64_to_dec_Default(raw, T, words);
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
}
